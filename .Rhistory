y = Var2,
fill = value)) +
geom_tile(color = 'white') +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white',
midpoint = 0, limit = c(-1,1), space = 'Lab',
name = 'Pearson\nCorrelation') +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
ggtitle('Original data')
save(heatmap_aad, file = "models/stacking/heatmap_aad")
# misclassified
cormat_mis_40 <- round(cor(mis_40 %>%
mutate(Cutaneous.Leishmaniasis = CL) %>%
select(-c(CL, Case,.pred_class))), 2)
melted_cormat_mis_40 <- melt(cormat_mis_40)
heatmap_mis_40 <- ggplot(data = melted_cormat_mis_40,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = 'white') +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white',
midpoint = 0, limit = c(-1,1), space = 'Lab',
name = 'Pearson\nCorrelation') +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
ggtitle('Incorrectly Classified')
save(heatmap_mis_40, file = "models/stacking/heatmap_mis_40")
# correctly classified
correct_40 <- data_test_40 %>%
mutate(CL = testing_t$Cutaneous.Leishmaniasis) %>%
filter((data_test_40$Cutaneous.Leishmaniasis == data_test_40$.pred_class)) %>%
mutate(Case = which((data_test_40$.pred_class == data_test_40$Cutaneous.Leishmaniasis)))
cormat_correct_40 <- round(cor(correct_40 %>%
mutate(Cutaneous.Leishmaniasis = CL) %>%
select(-c(CL, Case,.pred_class))), 2)
melted_cormat_correct_40 <- melt(cormat_correct_40)
heatmap_correct_40 <- ggplot(data = melted_cormat_correct_40,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = 'white') +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white',
midpoint = 0, limit = c(-1,1), space = 'Lab',
name = 'Pearson\nCorrelation') +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
ggtitle('Correctly Classified')
save(heatmap_correct_40, file = "models/stacking/heatmap_correct_40")
load("models/stacking/heatmap_aad")
load("models/stacking/heatmap_mis_40")
load("models/stacking/heatmap_correct_40")
heatmap_aad
heatmap_mis_40
heatmap_correct_40
data_st_50
model_st_50
data_test_50
colnames(data_test_60_temp)
data_test_60 %>% summary
data_test_60_temp %>% summary
Index_temp
data_test_30_temp %>% summary
data_test_30 %>% summary
data_test_30[Index_temp,]
data_test_30_temp[Index_temp,]
data_test_30[Index_temp,]
data_test_30 %>% dim
data_test_30_temp %>% dim
explanatory = c('LST_Day', 'Year', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population')
dependent = 'Cutaneous.Leishmaniasis'
data_test_30_2 %>%
missing_pairs(dependent, explanatory)
missing_plot(data_test_30_2)
data_test_40 %>% head
data_test_40
data_test_40 %>% head %>% as_data_frame()
data_test_40
conf_mat_early_CL_classif_40
conf_mat_early_CL_classif_30
conf_mat_early_CL_classif_40
conf_mat_early_CL_classif_50
conf_mat_early_CL_classif_60
conf_mat_early_CL_classif_70
conf_mat_early_CL_classif_30
conf_mat_early_CL_classif_40
conf_mat_early_CL_classif_50
conf_mat_early_CL_classif_60
conf_mat_early_CL_classif_70
load(file = 'models/stacking/data_test_early_CL_classif_30')
load(file = 'models/stacking/data_test_early_CL_classif_40')
load(file = 'models/stacking/data_test_early_CL_classif_50')
load(file = 'models/stacking/data_test_early_CL_classif_60')
load(file = 'models/stacking/data_test_early_CL_classif_70')
data_test_30
data_test_40
roc_30
roc_40
roc_50
roc_list
data.auc
data.labels
pROC::ggroc(roc_list,
legacy.axes = F) +
scale_color_discrete(labels = data.labels$label_long)
knitr::opts_chunk$set(echo = T, cache = T, eval = F, results = 'show')
# helper packages
library(tidyverse)
library(tidymodels)
library(stacks)
# load and split the early data using imputed data
load('./data/imp')
quantile_data <- data %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(Cutaneous.Leishmaniasis)
quantile <- (quantile_data$Cutaneous.Leishmaniasis %>%
quantile(0.4))[[1]] # PARAMETER
data <- data %>%
filter(Year < 2014) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c('Cutaneous.Leishmaniasis', 'LST_Day', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population'))
# helper packages
library(tidyverse)
library(tidymodels)
library(stacks)
# load and split the early data using imputed data
load('./data/imp')
quantile_data <- data %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(Cutaneous.Leishmaniasis)
quantile <- (quantile_data$Cutaneous.Leishmaniasis %>%
quantile(0.4))[[1]] # PARAMETER
data <- data %>%
filter(Year < 2014) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c('Cutaneous.Leishmaniasis', 'LST_Day', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population'))
data$pland_forest <- ifelse(is.na(data$pland_forest), 0, data$pland_forest)
data$te_forest <- ifelse(is.na(data$te_forest), 0, data$te_forest)
data$enn_mn_forest <- ifelse(is.na(data$enn_mn_forest), 0, data$enn_mn_forest)
data$Cutaneous.Leishmaniasis <- as.factor(ifelse(data$Cutaneous.Leishmaniasis < quantile, 0, 1))
set.seed(123) # for reproducibility
split <- initial_split(data)
data_train <- training(split)
data_test_40 <- testing(split)
# use a 5-fold cross-validation
folds <- rsample::vfold_cv(data_train,
v = 5,
strata = Cutaneous.Leishmaniasis)
# set up a basic recipe
data_rec <-
recipe(Cutaneous.Leishmaniasis ~ LST_Day + NDVI +
EVI + Precip + StableLights + SWOccurrence + pland_forest +
te_forest + enn_mn_forest + Population, data = data_train) %>%
step_dummy(all_nominal() - all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric())
# define a minimal workflow
data_wflow <-
workflow() %>%
add_recipe(data_rec)
# add metric
metric <- metric_set(sensitivity, accuracy)
# save assessment set predictions and workflow used to fit the resamples
ctrl_grid <- control_stack_grid()
ctrl_res <- control_stack_resamples()
# models: SVM, XGBoost, RF
## models to try: logistic regression
# toy model
log_reg_spec <-
logistic_reg() %>%
set_engine('glm')
log_reg_wflow <-
data_wflow %>%
add_model(log_reg_spec)
set.seed(123)
log_reg_res <-
fit_resamples(
log_reg_wflow,
resamples = folds,
metrics = metric,
control = ctrl_res
)
# define svm model using parsnip
svm_spec <-
svm_rbf(
cost = parsnip::tune(),
rbf_sigma = parsnip::tune(),
engine = 'kernlab',
mode = 'classification'
)
# add it to a workflow
svm_wflow <-
data_wflow %>%
add_model(svm_spec)
# tune cost and rbf_sigma and fit to the 5-fold cv
set.seed(123)
svm_res <-
tune_grid(
svm_wflow,
resamples = folds,
grid = 5,
control = ctrl_grid
)
save(svm_res, file = 'models/stacking/svm_res_early_CL_classif_40_noyear')
# define xgboost model using parsnip
set.seed(123)
xgb_spec <-
boost_tree(
mtry = tune(),
trees = tune(),
min_n = tune(),
tree_depth = tune(),
learn_rate = tune(),
loss_reduction = tune()
) %>%
set_engine('xgboost') %>%
set_mode('classification')
# add it to a workflow
xgb_wflow <-
data_wflow %>%
add_model(xgb_spec)
# tune mtry, trees, min_n, tree_depth, etc.
xgb_res <-
tune_grid(
xgb_wflow,
resamples = folds,
grid = 5,
control = ctrl_grid
)
save(xgb_res, file = 'models/stacking/xgb_res_early_CL_classif_40_noyear')
#
# define rf model using parsnip
set.seed(123)
rf_spec <-
rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_engine('ranger') %>%
set_mode('classification')
# add it to a workflow
rf_wflow <-
data_wflow %>%
add_model(rf_spec)
# tune mtry, trees, min_n
rf_res <-
tune_grid(
rf_wflow,
resamples = folds,
grid = 5,
control = ctrl_grid
)
save(rf_res, file = 'models/stacking/rf_res_early_CL_classif_40_noyear')
#
library(discrim) # for engine = 'naivebayes' or 'klaR'
library(agua) # for engine = 'h2o'
# define nb model using parsnip
nb_spec <-
naive_Bayes(
mode = 'classification',
smoothness = tune(),
Laplace = tune(),
engine = 'naivebayes'
)
# add it to a workflow
nb_wflow <-
data_wflow %>%
add_model(nb_spec)
# tune smoothness and Laplace
nb_res <-
tune_grid(
nb_wflow,
resamples = folds,
grid = 5,
control = ctrl_grid
)
save(nb_res, file = 'models/stacking/nb_res_early_CL_classif_40_noyear')
load(file = 'models/stacking/svm_res_early_CL_classif_40_noyear')
load(file = 'models/stacking/xgb_res_early_CL_classif_40_noyear')
load(file = 'models/stacking/rf_res_early_CL_classif_40_noyear')
load(file = 'models/stacking/nb_res_early_CL_classif_40_noyear')
data_st_40 <-
stacks() %>%
add_candidates(xgb_res) %>%
add_candidates(rf_res) %>%
add_candidates(svm_res) %>%
add_candidates(nb_res)
save(data_st_40, file = 'models/stacking/data_st_early_CL_classif_40_noyear')
# creating a model stack
## ready to evaluate how it is that we need to combine predictions from
## each candidate ensembe member
model_st_40 <-
data_st_40 %>%
blend_predictions()
model_st_40 <-
model_st_40 %>%
fit_members()
save(model_st_40, file = 'models/stacking/model_st_early_CL_classif_40_noyear')
set.seed(123)
data_test_40 <- testing(split)
data_test_40 <-
data_test_40 %>%
bind_cols(predict(model_st_40, .))
save(data_test_40, file = 'models/stacking/data_test_early_CL_classif_40_noyear')
# confusion matrix for stacks
conf_mat_early_CL_classif_40 <- caret::confusionMatrix(data = data_test_40$.pred_class,
reference = data_test_40$Cutaneous.Leishmaniasis,
positive = '1')
save(conf_mat_early_CL_classif_40, file = 'models/stacking/conf_mat_early_CL_classif_40_noyear')
# confusion matrix for base models
member_preds <-
data_test_40 %>%
dplyr::select(Cutaneous.Leishmaniasis) %>%
bind_cols(
predict(
model_st_40,
data_test_40,
members = TRUE
)
)
conf_mat_early_CL_classif_40
roc_40 <- roc(data_test_40$Cutaneous.Leishmaniasis,
data_test_40$.pred_class %>% as.ordered(),
print.auc = T)
pROC::ggroc(roc_list,
legacy.axes = F) +
scale_color_discrete(labels = data.labels$label_long)
library(tidyverse)
library(pROC)
library(dplyr)
library(ggplot2)
library(plotROC)
load(file = 'models/stacking/data_test_early_CL_classif_30')
load(file = 'models/stacking/data_test_early_CL_classif_40')
load(file = 'models/stacking/data_test_early_CL_classif_50')
load(file = 'models/stacking/data_test_early_CL_classif_60')
load(file = 'models/stacking/data_test_early_CL_classif_70')
roc_30 <- roc(data_test_30$Cutaneous.Leishmaniasis,
data_test_30$.pred_class %>% as.numeric(),
print.auc = T)
roc_40 <- roc(data_test_40$Cutaneous.Leishmaniasis,
data_test_40$.pred_class %>% as.ordered(),
print.auc = T)
roc_50 <- roc(data_test_50$Cutaneous.Leishmaniasis,
data_test_50$.pred_class %>% as.ordered(),
print.auc = T)
roc_60 <- roc(data_test_60$Cutaneous.Leishmaniasis,
data_test_60$.pred_class %>% as.ordered())
roc_70 <- roc(data_test_70$Cutaneous.Leishmaniasis,
data_test_70$.pred_class %>% as.ordered())
roc_list <- list('30th percentile' = roc_30,
'40th percentile' = roc_40,
'50th percentile' = roc_50,
'60th percentile' = roc_60,
'70th percentile' = roc_70)
# extract AUC
data.auc <- roc_list %>%
map(~tibble(AUC = .x$auc)) %>%
bind_rows(.id = 'name')
# generate labels
data.labels <- data.auc %>%
mutate(label_long = paste0(name, ' , AUC = ',
paste(round(AUC,2))),
label_AUC = paste0('AUC = ',
paste(round(AUC,2))))
pROC::ggroc(roc_list,
legacy.axes = F) +
scale_color_discrete(labels = data.labels$label_long)
cl_aad <- aad %>%
select(-c(Chikungunya,
Dengue,
Malaria,
Mucosal.Leishmaniasis,
Visceral.Leishmaniasis,
Yellow.Fever,
Zika)) %>%
group_by(Year)
early_aad <- aad %>%
filter(Year < 2014) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c('Cutaneous.Leishmaniasis', 'LST_Day', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population'))
early_aad <- aad %>%
filter(Year < 2014) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c('Cutaneous.Leishmaniasis', 'LST_Day', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population')) %>%
group_by('Year')
missing_plot(early_aad)
early_aad <- aad %>%
filter(Year < 2014) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c('Cutaneous.Leishmaniasis', 'LST_Day', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population')) %>%
group_by(Year)
early_aad <- aad %>%
filter(Year < 2014) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c('Cutaneous.Leishmaniasis', 'LST_Day', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population', 'Year')) %>%
group_by(Year)
missing_plot(early_aad)
missing_plot(early_aad)
missing_plot(early_aad)
missing_plot(early_aad %>% filter(Year == 2000))
early_aad <- aad %>%
filter(Year < 2014) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c('Cutaneous.Leishmaniasis', 'LST_Day', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population', 'Year'))
missing_plot(early_aad %>% filter(Year == 2000))
missing_plot(early_aad %>% filter(Year == 2001))
missing_plot(early_aad %>% filter(Year == 2002))
missing_plot(early_aad %>% filter(Year == 2003))
missing_plot(early_aad %>% filter(Year == 2001))
missing_plot(early_aad %>% filter(Year == 2002))
missing_plot(early_aad %>% filter(Year == 2003))
missing_plot(early_aad %>% filter(Year == 2004))
missing_plot(early_aad %>% filter(Year == 2005))
missing_plot(early_aad %>% filter(Year == 2006))
missing_plot(early_aad %>% filter(Year == 2007))
missing_plot(early_aad %>% filter(Year == 2008))
missing_plot(early_aad %>% filter(Year == 2009))
missing_plot(early_aad %>% filter(Year == 2010))
missing_plot(early_aad %>% filter(Year == 2011))
missing_plot(early_aad %>% filter(Year == 2012))
missing_plot(early_aad %>% filter(Year == 2013))
early_aad %>% filter(is.na(pland_forest))
early_aad %>% filter(is.na(pland_forest))
early_aad %>% filter(is.na(pland_forest)) %>% View()
aad %>% filter(Year < 2014) %>% filter(is.na(pland_forest)) %>% View()
aad %>% filter(Year < 2014) %>%
filter(is.na(pland_forest)) %>%
mutate(Year = as.factor(Year))
aad %>% filter(Year < 2014) %>%
filter(is.na(pland_forest)) %>%
mutate(Year = as.factor(Year)) %>%
summary()
early_aad <- aad %>%
filter(Year < 2014) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c('Cutaneous.Leishmaniasis', 'LST_Day', # include LST_Night?
'NDVI', 'EVI', 'Precip',
'StableLights', 'SWOccurrence', 'pland_forest',
'te_forest', 'enn_mn_forest','Population', 'Year',
'Code'))
early_aad %>% filter(Year < 2014) %>%
filter(is.na(pland_forest)) %>%
mutate(Year = as.factor(Year)) %>%
summary()
knitr::opts_chunk$set(echo = T, cache = T, eval = F, results = 'show')
# load and split the early data using imputed data
load('./data/imp')
# load and split the early data using imputed data
load('../data/imp')
# load and split the early data using imputed data
load('.../data/imp')
# load and split the early data using imputed data
load('../data/imp')
# load and split the early data using imputed data
load('./data/imp')
getwd()
load('./data/imp')
load('../data/imp')
knitr::opts_chunk$set(echo = T, cache = T, eval = T, results = 'show')
load(file = '../../data/imp')
aad <- read_csv('models/data/aad.csv')
library(readr)
aad <- read_csv('models/data/aad.csv')
knitr::opts_chunk$set(echo = T,
cache = T,
eval = F,
results = 'show',
warning = F,
message = F)
options(digits = 10, scipen = 0)
aad <- read_csv('../../data/aad.csv')
aad <- read_csv('../data/aad.csv')
aad <- read_csv('../data/aad.csv')
load(file = '../../data/imp')
