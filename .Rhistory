len <- fit_dynrmf_train$mean %>% length()
fit_dynrmf_test$fitted %>% plot()
fit_dynrmf_train$mean %>% plot()
ggplot() +
geom_line(aes(x = 1:len,
y = fit_dynrmf_test$fitted[1:len] - fit_dynrmf_train$mean[1:len]))
set.seed(2)
fit_dynrmf_test <- dynrmf(test %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
fit_func = svm,
fit_params = list(kernel = 'radial',
cost = 10),
predict_func = predict,
h = 10, level = 95)
fit_dynrmf_train <- dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
fit_func = svm,
fit_params = list(kernel = 'radial',
cost = 10),
predict_func = predict,
h = (fit_dynrmf_test$fitted %>% length), level = 95)
len <- fit_dynrmf_train$mean %>% length()
fit_dynrmf_test$fitted %>% plot()
fit_dynrmf_train$mean %>% plot()
ggplot() +
geom_line(aes(x = 1:len,
y = fit_dynrmf_test$fitted[1:len] - fit_dynrmf_train$mean[1:len]))
set.seed(2)
fit_dynrmf_test <- dynrmf(test %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
fit_func = svm,
fit_params = list(kernel = 'radial',
epsilon = 0.3),
predict_func = predict,
h = 10, level = 95)
fit_dynrmf_train <- dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
fit_func = svm,
fit_params = list(kernel = 'radial',
epsilon = 0.3),
predict_func = predict,
h = (fit_dynrmf_test$fitted %>% length), level = 95)
len <- fit_dynrmf_train$mean %>% length()
fit_dynrmf_test$fitted %>% plot()
fit_dynrmf_train$mean %>% plot()
ggplot() +
geom_line(aes(x = 1:len,
y = fit_dynrmf_test$fitted[1:len] - fit_dynrmf_train$mean[1:len]))
library(xgboost)
fit_dynrmf_test <- dynrmf(test %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
fit_func = xgboost,
fit_params = list(objective = 'linear:reg'),
predict_func = predict,
h = 10, level = 95)
par(mfrow = c(3,2))
set.seed(123)
plot(ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len))
plot(ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len,
level = 95))
plot(ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len,
level = 95),
main = 'auto')
plot(ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len,
level = 95) %>% as.matrix())
plot(ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len,
level = 95) %>% as.numeric())
plot(ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len,
level = 95))
plot(ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len,
level = 95) %>% unlist())
ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len,
level = 95) %>% unlist()
plot(ahead::dynrmf(train %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(Precip),
h = len,
level = 95))
knitr::opts_chunk$set(echo = TRUE)
aad <- read.csv("../models/data/aad.csv") %>%
filter(!is.na(Cutaneous.Leishmaniasis))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
aad <- read.csv("../models/data/aad.csv") %>%
filter(!is.na(Cutaneous.Leishmaniasis))
data <- aad %>%
filter(Year < 2018) %>%
group_by(Year) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T) %>%
ungroup()
early_data <- data %>%
filter(Year < 2014)
later_data <- data %>%
filter(Year >= 2014)
data <- aad %>%
filter(Year < 2018) %>%
group_by(Year) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T) %>%
ungroup()
data <- aad %>%
filter(Year < 2018) %>%
group_by(Year) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T) %>%
ungroup()
early_data <- data %>%
filter(Year < 2014)
later_data <- data %>%
filter(Year >= 2014)
aad <- aad %>%
mutate(Cutaneous.Leishmaniasis = (Cutaneous.Leishmaniasis * 1000) %>% round)
early_fit <- glm(Cutaneous.Leishmaniasis ~ Year + EVI + NDVI +
Population + LST_Day +
Precip + StableLights + SWOccurrence +
Muni_TotalArea + pland_forest + te_forest +
enn_mn_forest, data = aad,
family = poisson(link = 'log'))
early_fit %>% summary()
early_fit
early_fit %>% summary()
early_fit %>% plot()
aad
aad <- aad %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
mutate(Cutaneous.Leishmaniasis = (Cutaneous.Leishmaniasis * 1000) %>% round)
early_fit <- glm(Cutaneous.Leishmaniasis ~ Year + EVI + NDVI +
Population + LST_Day +
Precip + StableLights + SWOccurrence +
Muni_TotalArea + pland_forest + te_forest +
enn_mn_forest, data = aad,
family = poisson(link = 'log'))
early_fit %>% summary()
early_fit %>% plot()
early_fit <- glm(Cutaneous.Leishmaniasis ~ Year + EVI + NDVI +
Population + LST_Day +
Precip + StableLights + SWOccurrence +
Muni_TotalArea + pland_forest + te_forest +
enn_mn_forest, data = aad %>% filter(Year < 2014),
family = poisson(link = 'log'))
early_fit %>% summary()
early_fit %>% plot()
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE)
ggplot(data = sample, mapping = aes(te_forest, Cutaneous.Leishmaniasis, xlab = "Land Surface Temperature", ylab = "Cases of Cutaenous Leishmaniasis per Thousand")) +
geom_box()
library(drc)
library(ggplot2)
library(dplyr)
library(MASS)
ggplot(data = sample, mapping = aes(te_forest, Cutaneous.Leishmaniasis, xlab = "Land Surface Temperature", ylab = "Cases of Cutaenous Leishmaniasis per Thousand")) +
geom_boxplot()
aad <- read.csv("../models/data/aad.csv")
aad <- subset(aad, !is.na(aad$Cutaneous.Leishmaniasis))
aad <- subset(aad, aad$Cutaneous.Leishmaniasis > 0)
aad <- subset(aad, !is.na(aad$te_forest))
ggplot(data = aad, mapping = aes(te_forest, Cutaneous.Leishmaniasis, xlab = "Land Surface Temperature", ylab = "Cases of Cutaenous Leishmaniasis per Thousand")) +
geom_point()
set.seed(22)
sample <- sample_n(aad, 500)
ggplot(data = sample, mapping = aes(te_forest, Cutaneous.Leishmaniasis, xlab = "Land Surface Temperature", ylab = "Cases of Cutaenous Leishmaniasis per Thousand")) +
geom_boxplot()
ggplot(data = sample, mapping = aes(te_forest, Cutaneous.Leishmaniasis, xlab = "Land Surface Temperature", ylab = "Cases of Cutaenous Leishmaniasis per Thousand")) +
geom_point()
library(dplyr)
aad <- read.csv("../models/data/aad.csv")
aad <- subset(aad, !is.na(aad$Cutaneous.Leishmaniasis))
aad <- subset(aad, aad$Cutaneous.Leishmaniasis > 0)
aad <- subset(aad, aad$Year < 2018)
aad$te_forest <- ifelse(is.na(aad$te_forest), 0, aad$te_forest)
mean_te_forest<- aad %>%
group_by(Year) %>%
summarise_at(vars(te_forest), list(name = mean))
mean_te_forest
plot(mean_te_forest, main = "te_forest between 2001 and 2019", xlab = "Year", ylab = "te_forest")
small_df <- aad %>%
dplyr::select("Cutaneous.Leishmaniasis", "te_forest")
small_df <- small_df %>%
mutate(
te_forest = cut(te_forest, breaks = seq(min(te_forest), max(te_forest), by = 2000000), include.lowest = TRUE)
) %>%
group_by(te_forest) %>%
summarise(Cutaneous.Leishmaniasis = mean(Cutaneous.Leishmaniasis))
plot(small_df$te_forest, small_df$Cutaneous.Leishmaniasis)
ggplot(data = small_df, mapping = aes(te_forest, Cutaneous.Leishmaniasis)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90))
ggplot(data = small_df, mapping = aes(te_forest, Cutaneous.Leishmaniasis)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90))
ggplot(data = small_df, mapping = aes(te_forest, Cutaneous.Leishmaniasis)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90))
ggplot(data = small_df, mapping = aes(te_forest, Cutaneous.Leishmaniasis)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90))
ggplot(data = small_df, mapping = aes(te_forest, Cutaneous.Leishmaniasis)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90))
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T) %>%
ungroup()
aad_muni
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name, Year) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T) %>%
ungroup()
aad_muni
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name, Year) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T)
aad_muni
aad_muni <- aad %>%
filter(Year < 2018) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T)
aad_muni
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T)
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name)
aad_muni
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis))
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0)
aad_muni
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
select(c(Year, EVI, NDVI, Population,
LST_Day, LST_Night, Precip,
StableLights, AvgRad, SWOccurrence,
Muni_TotalArea, pland_forest,
te_forest, enn_mn_forest))
aad_muni
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
select(c(Year, EVI, NDVI, Population,
LST_Day, LST_Night, Precip,
StableLights, AvgRad, SWOccurrence,
Muni_TotalArea, pland_forest,
te_forest, enn_mn_forest))
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c(Year, EVI, NDVI, Population,
LST_Day, LST_Night, Precip,
StableLights, AvgRad, SWOccurrence,
Muni_TotalArea, pland_forest,
te_forest, enn_mn_forest))
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c(Year, EVI, NDVI, Population,
LST_Day, LST_Night, Precip,
StableLights, AvgRad, SWOccurrence,
Muni_TotalArea, pland_forest,
te_forest, enn_mn_forest))
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c(Year, EVI, NDVI, Population,
LST_Day, LST_Night, Precip,
StableLights, AvgRad, SWOccurrence,
Muni_TotalArea, pland_forest,
te_forest, enn_mn_forest))
aad_muni
ggplot(aad_muni)+
geom_line(aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name))
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0) %>%
dplyr::select(c(Cutaneous.Leishmaniasis, Year, EVI,
NDVI, Population,
LST_Day, LST_Night, Precip,
StableLights, AvgRad, SWOccurrence,
Muni_TotalArea, pland_forest,
te_forest, enn_mn_forest))
aad_muni
ggplot(aad_muni)+
geom_line(aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name))
ggplot(aad_muni) +
geom_line(aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name)) +
theme(legend.position = 'none')
ggplot(aad_muni) +
geom_line(aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name)) +
stat_smooth(geom = 'lm')
ggplot(aad_muni) +
geom_line(aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name)) +
smooth.spline()
ggplot(aad_muni) +
geom_line(aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_smooth(method = 'lm')
ggplot(aad_muni) +
geom_line(aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_smooth(method = 'lm') +
theme(legend.position = 'none')
ggplot(aad_muni,
aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_line() +
geom_smooth(method = 'lm') +
theme(legend.position = 'none')
ggplot(aad_muni,
aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_point() +
geom_smooth(method = 'lm') +
theme(legend.position = 'none')
ggplot(aad_muni,
aes(x = Year,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_point() +
geom_smooth(method = 'lm',
alpha = 0.1) +
theme(legend.position = 'none')
ggplot(aad_muni,
aes(x = te_forest,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_point() +
geom_smooth(method = 'lm',
alpha = 0.1) +
theme(legend.position = 'none')
ggplot(aad_muni,
aes(x = AvgRad,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_point() +
geom_smooth(method = 'lm',
alpha = 0.1) +
theme(legend.position = 'none')
aad_muni <- aad %>%
filter(Year < 2018) %>%
group_by(Name) %>%
filter(!is.na(Cutaneous.Leishmaniasis)) %>%
filter(Cutaneous.Leishmaniasis > 0.3) %>%
dplyr::select(c(Cutaneous.Leishmaniasis, Year, EVI,
NDVI, Population,
LST_Day, LST_Night, Precip,
StableLights, AvgRad, SWOccurrence,
Muni_TotalArea, pland_forest,
te_forest, enn_mn_forest))
ggplot(aad_muni,
aes(x = AvgRad,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_point() +
geom_smooth(method = 'lm',
alpha = 0.1) +
theme(legend.position = 'none')
knitr::opts_chunk$set(echo = TRUE,
warnings = FALSE)
ggplot(aad_muni,
aes(x = AvgRad,
y = Cutaneous.Leishmaniasis,
color = Name)) +
geom_point() +
geom_smooth(method = 'lm',
alpha = 0.1) +
theme(legend.position = 'none')
knitr::opts_chunk$set(echo = TRUE,
warnings = FALSE)
library(dplyr)
aad <- read.csv("../models/data/aad.csv") %>%
filter(!is.na(Cutaneous.Leishmaniasis))
data <- aad %>%
filter(Year < 2018) %>%
group_by(Year) %>%
summarise_at(vars(c(Cutaneous.Leishmaniasis, EVI, NDVI,
Population, LST_Day, LST_Night,
Precip, StableLights, AvgRad,
SWOccurrence, Muni_TotalArea,
pland_forest, te_forest, enn_mn_forest)),
mean,
na.rm = T) %>%
ungroup()
early_data <- data %>%
filter(Year < 2014)
later_data <- data %>%
filter(Year >= 2014)
=======
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i]
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i]
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
unique(monthly_short[,'Code'])[i]
unique(monthly_short[,'Code'])[i,]
h = 2 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
skip <- FALSE
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k])) %>%
ts(start = 2000),
na.rm = TRUE,
lambda='auto',
h=10,
level=80,
drift=T,
bootstrap=T)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k])) %>%
ts(start = 2000),
na.rm = TRUE,
lambda='auto',
h=10,
level=80,
drift=T,
bootstrap=T)$mean[j]
dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k])) %>%
ts(start = 2000),
na.rm = TRUE,
lambda='auto',
h=10,
level=80,
drift=T,
bootstrap=T)
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()
)
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k]))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer())
h = 2 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
skip <- FALSE
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k])) %>%
ts(start = 1),
na.rm = TRUE,
lambda='auto',
h=10,
level=80,
drift=T,
bootstrap=T)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k])),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 100, level = 95)$mean[j]
dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k])),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 100, level = 95)
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k]))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[k]))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[2]))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[5]))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer())
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(LST_Day)
(colnames(monthly_short)[5])
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[5]))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(c(colnames(monthly_short)[5,]))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
dplyr::select(c(colnames(monthly_short)[5]))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer())
i
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer())
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short))
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[5])
colnames(monthly_short)[5]
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[5])
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(Population)
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[6])
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(LST_Day)
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[k])
k
5:(colnames(monthly_short) %>% length)
type(k)
typeof(k)
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[k,])
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[[k]])
k
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[[11]])
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[k])
k = 5
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[5])
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[k])
k = 6
monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[1,] %>% as.integer()) %>%
select(colnames(monthly_short)[k])
h = 2 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select((colnames(monthly_short)[k])),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 100, level = 95)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
h = 10 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select((colnames(monthly_short)[k])),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 100, level = 95)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
h = 10 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 100, level = 95)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k %>% as.integer()]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 100, level = 95)$mean[j]
fit_dynrmf <- dynrmf(monthly_short %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(LST_Day),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 2, level = 95)
fit_dynrmf$mean
h = 2 # param
h = 2 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = h, level = 95)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
h = 100 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = h, level = 95)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
knitr::opts_chunk$set(echo = TRUE)
library(ahead)
library(datasets)
library(randomForest)
library(e1071)
library(tidyverse)
sessionInfo()
monthly <- read_csv('../data/monthly_df.csv')
monthly_short <- monthly %>%
filter(Year > 2013) %>%
filter(!is.na(LST_Day)) %>%
filter(!is.na(AvgRad)) %>%
filter(!is.na(EVI)) %>%
filter(!is.na(NDVI)) %>%
filter(!is.na(Precip)) %>%
filter(!is.na(SWOccurrence)) %>%
mutate(Month = (Year - 2014)*12 + Month) %>%
select(c(Name, Code, Year, Month,
Population, LST_Day,
NDVI, EVI, Precip,
AvgRad, SWOccurrence,
pland_forest, area_mn_forest,
te_forest)) %>%
mutate(pland_forest = ifelse(is.na(pland_forest), 0,
pland_forest)) %>%
mutate(area_mn_forest = ifelse(is.na(area_mn_forest), 0,
area_mn_forest)) %>%
mutate(te_forest = ifelse(is.na(te_forest), 0,
te_forest)) %>%
mutate(Code = sub("^0+", "", Code))
fit_dynrmf <- dynrmf(monthly_short %>%
filter(Code == sample(monthly_short$Code %>%
unique(), 1)) %>%
select(LST_Day),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 2, level = 95)
fit_dynrmf$mean
h = 10 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = h, level = 95)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
fit_dynrmf <- dynrmf(monthly_short %>%
filter(Code == 10101) %>%
select(LST_Day),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 2, level = 95)
fit_dynrmf$mean
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
h = 10 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = h, level = 95)$mean[j]
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
i
j
k
colnames(monthly_short)[k]
fit_dynrmf <- dynrmf(monthly_short %>%
filter(Code == 10101) %>%
select(SWOccurrence),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = 2, level = 95)
dynrmf(monthly_short %>%
filter(Code == 10101) %>%
select(SWOccurrence),
fit_func = svm,
fit_params = list(kernel = 'linear'),
predict_func = predict,
h = 2, level = 95)
h = 10 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% length)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
skip <- FALSE
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = h, level = 95)$mean[j] %>%
tryCatch(error = function(e){ skip <- TRUE })
if(skip) {
forecasted_dynrmf[(i-1)*h + j, k] = mean(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]))
}
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
colnames(forecasted_dynrmf) <- monthly_short %>% colnames
forecasted_dynrmf
(unique(monthly_short[,'Code']) %>% length)
monthly_short
monthly_short[,'Code']
monthly_short[,'Code'] %>% unique
colnames(monthly_short) %>% length)
colnames(monthly_short) %>% length
h = 10 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% nrow)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
skip <- FALSE
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = h, level = 95)$mean[j] %>%
tryCatch(error = function(e){ skip <- TRUE })
if(skip) {
forecasted_dynrmf[(i-1)*h + j, k] = mean(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]))
}
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
colnames(forecasted_dynrmf) <- monthly_short %>% colnames
h = 3 # param
forecasted_dynrmf <- data.frame(matrix(ncol = ncol(monthly_short),
nrow = 0))
for (i in 1:(unique(monthly_short[,'Code']) %>% nrow)){ # 1:8554
for(j in 1:h) { # 1:10
for (k in 5:(colnames(monthly_short) %>% length)) { # 5:14
skip <- FALSE
forecasted_dynrmf[(i-1)*h + j, k] = dynrmf(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]),
fit_func = randomForest,
fit_params = list(ntree = 50),
predict_func = predict,
h = h, level = 95)$mean[j] %>%
tryCatch(error = function(e){ skip <- TRUE })
if(skip) {
forecasted_dynrmf[(i-1)*h + j, k] = mean(monthly_short %>%
filter(Code == unique(monthly_short[,'Code'])[i,] %>% as.integer()) %>%
select(colnames(monthly_short)[k]))
}
}
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,] %>% as.integer()
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
colnames(forecasted_dynrmf) <- monthly_short %>% colnames
forecasted_dynrmf
save(forecasted_dynrmf, 'forecasted_dynrmf')
save(forecasted_dynrmf, file = 'forecasted_dynrmf')
j//12
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j\\12
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%/%12
for (i in 1:(unique(monthly_short[,'Code']) %>% nrow)){ # 1:8554
for(j in 1:h) { # 1:10
forecasted_dynrmf[(i-1)*h + j, 1] = unique(monthly_short[,'Name'])[i,]
forecasted_dynrmf[(i-1)*h + j, 2] = unique(monthly_short[,'Code'])[i,]
forecasted_dynrmf[(i-1)*h + j, 3] = 2020 + j%/%12
forecasted_dynrmf[(i-1)*h + j, 3] = j
}
}
